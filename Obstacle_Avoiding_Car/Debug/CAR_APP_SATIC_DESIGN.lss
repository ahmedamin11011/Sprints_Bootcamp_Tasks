
CAR_APP_SATIC_DESIGN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b62  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000bd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cab  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7f  00000000  00000000  00002aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000119d  00000000  00000000  0000382e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  000049cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075b  00000000  00000000  00004cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001194  00000000  00000000  00005413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000065a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	7b 03       	fmul	r23, r19
  56:	7f 03       	fmul	r23, r23
  58:	83 03       	fmuls	r16, r19
  5a:	17 04       	cpc	r1, r7
  5c:	87 03       	fmuls	r16, r23
  5e:	17 04       	cpc	r1, r7
  60:	8b 03       	fmulsu	r16, r19
  62:	8f 03       	fmulsu	r16, r23
  64:	b4 03       	fmuls	r19, r20
  66:	b8 03       	fmulsu	r19, r16
  68:	bd 03       	fmulsu	r19, r21
  6a:	1a 04       	cpc	r1, r10
  6c:	c2 03       	fmuls	r20, r18
  6e:	1a 04       	cpc	r1, r10
  70:	c7 03       	fmuls	r20, r23
  72:	cc 03       	fmulsu	r20, r20
  74:	ef 03       	fmulsu	r22, r23
  76:	f2 03       	fmuls	r23, r18
  78:	f7 03       	fmuls	r23, r23
  7a:	fc 03       	fmulsu	r23, r20
  7c:	01 04       	cpc	r0, r1
  7e:	06 04       	cpc	r0, r6
  80:	0b 04       	cpc	r0, r11
  82:	10 04       	cpc	r1, r0

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	aa 36       	cpi	r26, 0x6A	; 106
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
  a0:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
  a4:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <Car_SM_Init>:
volatile static uint16 u16_distance = 0;
volatile static	uint8 flag=0;
/*Describtion: this function initialize the ultrasonic and steering*/
ERROR_STATUS Car_SM_Init(void){
uint8 eror =0;
eror=Steering_Init();
  ac:	0e 94 b1 00 	call	0x162	; 0x162 <Steering_Init>
eror=Us_Init();
  b0:	0e 94 20 02 	call	0x440	; 0x440 <Us_Init>
	return eror;
	}
  b4:	08 95       	ret

000000b6 <Car_SM_Update>:
	
	
/*Describtion: this function update the diurection and speed of motor*/
ERROR_STATUS Car_SM_Update(void){
	uint8 eror=0;
eror=Us_GetDistance(&u16_distance);
  b6:	81 e6       	ldi	r24, 0x61	; 97
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 44 02 	call	0x488	; 0x488 <Us_GetDistance>
if(u16_distance>=30){
  be:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <u16_distance>
  c2:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <u16_distance+0x1>
  c6:	2e 31       	cpi	r18, 0x1E	; 30
  c8:	31 05       	cpc	r19, r1
  ca:	20 f0       	brcs	.+8      	; 0xd4 <Car_SM_Update+0x1e>
	flag=1;
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  d2:	1c c0       	rjmp	.+56     	; 0x10c <Car_SM_Update+0x56>
	}
	else if(u16_distance>10&&u16_distance<30){
  d4:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <u16_distance>
  d8:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <u16_distance+0x1>
  dc:	2b 30       	cpi	r18, 0x0B	; 11
  de:	31 05       	cpc	r19, r1
  e0:	58 f0       	brcs	.+22     	; 0xf8 <Car_SM_Update+0x42>
  e2:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <u16_distance>
  e6:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <u16_distance+0x1>
  ea:	2e 31       	cpi	r18, 0x1E	; 30
  ec:	31 05       	cpc	r19, r1
  ee:	20 f4       	brcc	.+8      	; 0xf8 <Car_SM_Update+0x42>
		flag=2;
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  f6:	0a c0       	rjmp	.+20     	; 0x10c <Car_SM_Update+0x56>
	}
	else if(u16_distance<=10){
  f8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <u16_distance>
  fc:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <u16_distance+0x1>
 100:	2b 30       	cpi	r18, 0x0B	; 11
 102:	31 05       	cpc	r19, r1
 104:	18 f4       	brcc	.+6      	; 0x10c <Car_SM_Update+0x56>
		flag=3;
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
	}
	switch(flag){
 10c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 110:	92 30       	cpi	r25, 0x02	; 2
 112:	49 f0       	breq	.+18     	; 0x126 <Car_SM_Update+0x70>
 114:	93 30       	cpi	r25, 0x03	; 3
 116:	a9 f0       	breq	.+42     	; 0x142 <Car_SM_Update+0x8c>
 118:	91 30       	cpi	r25, 0x01	; 1
 11a:	01 f5       	brne	.+64     	; 0x15c <Car_SM_Update+0xa6>
		case 1:
		eror=Steering_SteerCar(CAR_FORWARD,30);  
 11c:	6e e1       	ldi	r22, 0x1E	; 30
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 c0 00 	call	0x180	; 0x180 <Steering_SteerCar>
		break;
 124:	1b c0       	rjmp	.+54     	; 0x15c <Car_SM_Update+0xa6>
		case 2:
		eror=Steering_SteerCar(CAR_RIGHT,30);  
 126:	6e e1       	ldi	r22, 0x1E	; 30
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 c0 00 	call	0x180	; 0x180 <Steering_SteerCar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	31 ee       	ldi	r19, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <Car_SM_Update+0x7e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Car_SM_Update+0x88>
 13e:	00 00       	nop
 140:	0d c0       	rjmp	.+26     	; 0x15c <Car_SM_Update+0xa6>
		_delay_ms(100);
		break;
		case 3:
		eror=Steering_SteerCar(CAR_BACKWARD,50); 
 142:	62 e3       	ldi	r22, 0x32	; 50
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 c0 00 	call	0x180	; 0x180 <Steering_SteerCar>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	31 ee       	ldi	r19, 0xE1	; 225
 14e:	94 e0       	ldi	r25, 0x04	; 4
 150:	21 50       	subi	r18, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <Car_SM_Update+0x9a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Car_SM_Update+0xa4>
 15a:	00 00       	nop
		_delay_ms(100);
	}
	flag=0;
 15c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	return eror;
 160:	08 95       	ret

00000162 <Steering_Init>:
 /*Describtion: this function initialize the steering*/
ERROR_STATUS Steering_Init(void)
{
	uint8 error=NO_ERROR;
	
	error=Motor_Init(MOTOR_1);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Motor_Init>
	error=Motor_Init(MOTOR_2);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Motor_Init>
	error=Motor_Start(MOTOR_1, 30);
 16e:	6e e1       	ldi	r22, 0x1E	; 30
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
	error=Motor_Start(MOTOR_2, 30);
 176:	6e e1       	ldi	r22, 0x1E	; 30
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
	return error;
}
 17e:	08 95       	ret

00000180 <Steering_SteerCar>:


/*Describtion: this function initialize the steering with specific direction (forward,backward,left,right)*/
ERROR_STATUS Steering_SteerCar(uint8 carDirection, uint8 speed)
{
 180:	cf 93       	push	r28
 182:	c6 2f       	mov	r28, r22
	switch(carDirection)
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	19 f1       	breq	.+70     	; 0x1ce <Steering_SteerCar+0x4e>
 188:	28 f4       	brcc	.+10     	; 0x194 <Steering_SteerCar+0x14>
 18a:	88 23       	and	r24, r24
 18c:	41 f0       	breq	.+16     	; 0x19e <Steering_SteerCar+0x1e>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	69 f0       	breq	.+26     	; 0x1ac <Steering_SteerCar+0x2c>
 192:	45 c0       	rjmp	.+138    	; 0x21e <Steering_SteerCar+0x9e>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	61 f1       	breq	.+88     	; 0x1f0 <Steering_SteerCar+0x70>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	b1 f1       	breq	.+108    	; 0x208 <Steering_SteerCar+0x88>
 19c:	40 c0       	rjmp	.+128    	; 0x21e <Steering_SteerCar+0x9e>
	{
	case (CAR_STOP):
		Motor_Stop(MOTOR_1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Motor_Stop>
		Motor_Stop(MOTOR_2);
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Motor_Stop>
		break;
 1aa:	39 c0       	rjmp	.+114    	; 0x21e <Steering_SteerCar+0x9e>
	case (CAR_FORWARD):
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
		Motor_Start(MOTOR_1, speed);
 1bc:	6c 2f       	mov	r22, r28
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		Motor_Start(MOTOR_2, speed);
 1c4:	6c 2f       	mov	r22, r28
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		break;
 1cc:	28 c0       	rjmp	.+80     	; 0x21e <Steering_SteerCar+0x9e>
	case (CAR_BACKWARD):
		Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
		Motor_Start(MOTOR_1, speed);
 1de:	6c 2f       	mov	r22, r28
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		Motor_Start(MOTOR_2, speed);
 1e6:	6c 2f       	mov	r22, r28
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		break;
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <Steering_SteerCar+0x9e>
	case (CAR_RIGHT):
    	Motor_Stop(MOTOR_2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Motor_Stop>
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
	 //  Motor_Direction(MOTOR_2, MOTOR_STOP);
		Motor_Start(MOTOR_1, speed);
 1fe:	6c 2f       	mov	r22, r28
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		
		break;
 206:	0b c0       	rjmp	.+22     	; 0x21e <Steering_SteerCar+0x9e>
	case (CAR_LEFT):
	    Motor_Stop(MOTOR_1);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Motor_Stop>
		//Motor_Direction(MOTOR_1, MOTOR_STOP);
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 9f 01 	call	0x33e	; 0x33e <Motor_Direction>
		Motor_Start(MOTOR_2, speed);
 216:	6c 2f       	mov	r22, r28
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Motor_Start>
		break;
	}
	return NO_ERROR;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <Icu_Init>:
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	uint8 au8_Ret = NO_ERROR;

	/* Configure pin2 of portB as an input pin and activate the internal pull-up resistor option */
	PORTB_DIR &= ~BIT2;
 224:	ba 98       	cbi	0x17, 2	; 23
	PORTB_DATA |= BIT2;
 226:	c2 9a       	sbi	0x18, 2	; 24

	switch(Icu_Cfg->ICU_Ch_Timer)
 228:	fc 01       	movw	r30, r24
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	29 f4       	brne	.+10     	; 0x23a <Icu_Init+0x16>
	{
		case ICU_TIMER_CH2:
		/* Choose the prescaler of 1024 */
		TCCR2 = (TCCR2 & TIMER_PRESCALER_MASK) | TIMER2_1024_PRESCALER;
 230:	85 b5       	in	r24, 0x25	; 37
 232:	87 60       	ori	r24, 0x07	; 7
 234:	85 bd       	out	0x25, r24	; 37

/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
	uint8 au8_Ret = NO_ERROR;
 236:	80 e0       	ldi	r24, 0x00	; 0
	switch(Icu_Cfg->ICU_Ch_Timer)
	{
		case ICU_TIMER_CH2:
		/* Choose the prescaler of 1024 */
		TCCR2 = (TCCR2 & TIMER_PRESCALER_MASK) | TIMER2_1024_PRESCALER;
		break;
 238:	08 95       	ret
		default:
		au8_Ret = ERROR;
 23a:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return au8_Ret;
}
 23c:	08 95       	ret

0000023e <Icu_ReadTime>:
ERROR_STATUS Icu_ReadTime(uint8 Icu_Channel, uint8 Icu_EdgeToEdge, uint32* Icu_Time)
{
	uint8 au8_Ret = NO_ERROR;

	/* A switch case to determine the edge detection mode */
	switch(Icu_EdgeToEdge)
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	a9 f0       	breq	.+42     	; 0x26c <Icu_ReadTime+0x2e>
 242:	30 f1       	brcs	.+76     	; 0x290 <Icu_ReadTime+0x52>
 244:	62 30       	cpi	r22, 0x02	; 2
 246:	c1 f5       	brne	.+112    	; 0x2b8 <Icu_ReadTime+0x7a>
	{
		case ICU_FALE_TO_RISE:
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
 248:	b2 9b       	sbis	0x16, 2	; 22
 24a:	fe cf       	rjmp	.-4      	; 0x248 <Icu_ReadTime+0xa>
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
 24c:	b2 99       	sbic	0x16, 2	; 22
 24e:	fe cf       	rjmp	.-4      	; 0x24c <Icu_ReadTime+0xe>
		TCNT2 = 0;
 250:	14 bc       	out	0x24, r1	; 36
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
 252:	b2 9b       	sbis	0x16, 2	; 22
 254:	fe cf       	rjmp	.-4      	; 0x252 <Icu_ReadTime+0x14>
		*Icu_Time = TCNT2;
 256:	84 b5       	in	r24, 0x24	; 36
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	fa 01       	movw	r30, r20
 260:	80 83       	st	Z, r24
 262:	91 83       	std	Z+1, r25	; 0x01
 264:	a2 83       	std	Z+2, r26	; 0x02
 266:	b3 83       	std	Z+3, r27	; 0x03
	return au8_Ret;
}

ERROR_STATUS Icu_ReadTime(uint8 Icu_Channel, uint8 Icu_EdgeToEdge, uint32* Icu_Time)
{
	uint8 au8_Ret = NO_ERROR;
 268:	80 e0       	ldi	r24, 0x00	; 0
		while(PORTB_PIN & BIT2);
		TCNT2 = 0;
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
		*Icu_Time = TCNT2;
		break;
 26a:	08 95       	ret
		case ICU_RISE_TO_FALL:
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
 26c:	b2 99       	sbic	0x16, 2	; 22
 26e:	fe cf       	rjmp	.-4      	; 0x26c <Icu_ReadTime+0x2e>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
 270:	b2 9b       	sbis	0x16, 2	; 22
 272:	fe cf       	rjmp	.-4      	; 0x270 <Icu_ReadTime+0x32>
		TCNT2 = 0;
 274:	14 bc       	out	0x24, r1	; 36
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
 276:	b2 99       	sbic	0x16, 2	; 22
 278:	fe cf       	rjmp	.-4      	; 0x276 <Icu_ReadTime+0x38>
		*Icu_Time = TCNT2;
 27a:	84 b5       	in	r24, 0x24	; 36
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	a0 e0       	ldi	r26, 0x00	; 0
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	fa 01       	movw	r30, r20
 284:	80 83       	st	Z, r24
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	a2 83       	std	Z+2, r26	; 0x02
 28a:	b3 83       	std	Z+3, r27	; 0x03
	return au8_Ret;
}

ERROR_STATUS Icu_ReadTime(uint8 Icu_Channel, uint8 Icu_EdgeToEdge, uint32* Icu_Time)
{
	uint8 au8_Ret = NO_ERROR;
 28c:	80 e0       	ldi	r24, 0x00	; 0
		while(!(PORTB_PIN & BIT2));
		TCNT2 = 0;
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
		*Icu_Time = TCNT2;
		break;
 28e:	08 95       	ret
		case ICU_RISE_TO_RISE:
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
 290:	b2 99       	sbic	0x16, 2	; 22
 292:	fe cf       	rjmp	.-4      	; 0x290 <Icu_ReadTime+0x52>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
 294:	b2 9b       	sbis	0x16, 2	; 22
 296:	fe cf       	rjmp	.-4      	; 0x294 <Icu_ReadTime+0x56>
		TCNT2 = 0;
 298:	14 bc       	out	0x24, r1	; 36
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
 29a:	b2 99       	sbic	0x16, 2	; 22
 29c:	fe cf       	rjmp	.-4      	; 0x29a <Icu_ReadTime+0x5c>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
 29e:	b2 9b       	sbis	0x16, 2	; 22
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <Icu_ReadTime+0x60>
		*Icu_Time = TCNT2;
 2a2:	84 b5       	in	r24, 0x24	; 36
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	fa 01       	movw	r30, r20
 2ac:	80 83       	st	Z, r24
 2ae:	91 83       	std	Z+1, r25	; 0x01
 2b0:	a2 83       	std	Z+2, r26	; 0x02
 2b2:	b3 83       	std	Z+3, r27	; 0x03
	return au8_Ret;
}

ERROR_STATUS Icu_ReadTime(uint8 Icu_Channel, uint8 Icu_EdgeToEdge, uint32* Icu_Time)
{
	uint8 au8_Ret = NO_ERROR;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
		*Icu_Time = TCNT2;
		break;
 2b6:	08 95       	ret
		default:
		au8_Ret = ERROR;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

	return au8_Ret;
}
 2ba:	08 95       	ret

000002bc <Motor_Init>:
			Pwm_Update(PWM_CH1B,Speed, MOTOR_FREQUENCY);
			return NO_ERROR;
			break;
		}
return ERROR;	 
 }
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	28 97       	sbiw	r28, 0x08	; 8
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	19 f0       	breq	.+6      	; 0x2da <Motor_Init+0x1e>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	a9 f0       	breq	.+42     	; 0x302 <Motor_Init+0x46>
 2d8:	28 c0       	rjmp	.+80     	; 0x32a <Motor_Init+0x6e>
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	8b 83       	std	Y+3, r24	; 0x03
 2e2:	8c e1       	ldi	r24, 0x1C	; 28
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	ce 01       	movw	r24, r28
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	0e 94 84 02 	call	0x508	; 0x508 <DIO_init>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8f 83       	std	Y+7, r24	; 0x07
 2f2:	84 e0       	ldi	r24, 0x04	; 4
 2f4:	88 87       	std	Y+8, r24	; 0x08
 2f6:	ce 01       	movw	r24, r28
 2f8:	07 96       	adiw	r24, 0x07	; 7
 2fa:	0e 94 0a 03 	call	0x614	; 0x614 <Pwm_Init>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	15 c0       	rjmp	.+42     	; 0x32c <Motor_Init+0x70>
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	8c 83       	std	Y+4, r24	; 0x04
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8e 83       	std	Y+6, r24	; 0x06
 30a:	80 ee       	ldi	r24, 0xE0	; 224
 30c:	8d 83       	std	Y+5, r24	; 0x05
 30e:	ce 01       	movw	r24, r28
 310:	04 96       	adiw	r24, 0x04	; 4
 312:	0e 94 84 02 	call	0x508	; 0x508 <DIO_init>
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	8f 83       	std	Y+7, r24	; 0x07
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	88 87       	std	Y+8, r24	; 0x08
 31e:	ce 01       	movw	r24, r28
 320:	07 96       	adiw	r24, 0x07	; 7
 322:	0e 94 0a 03 	call	0x614	; 0x614 <Pwm_Init>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	01 c0       	rjmp	.+2      	; 0x32c <Motor_Init+0x70>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	28 96       	adiw	r28, 0x08	; 8
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <Motor_Direction>:
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	19 f0       	breq	.+6      	; 0x348 <Motor_Direction+0xa>
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	e9 f0       	breq	.+58     	; 0x380 <Motor_Direction+0x42>
 346:	38 c0       	rjmp	.+112    	; 0x3b8 <Motor_Direction+0x7a>
 348:	61 30       	cpi	r22, 0x01	; 1
 34a:	61 f4       	brne	.+24     	; 0x364 <Motor_Direction+0x26>
 34c:	4f ef       	ldi	r20, 0xFF	; 255
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	68 e0       	ldi	r22, 0x08	; 8
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	62 30       	cpi	r22, 0x02	; 2
 366:	51 f5       	brne	.+84     	; 0x3bc <Motor_Direction+0x7e>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	64 e0       	ldi	r22, 0x04	; 4
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 372:	4f ef       	ldi	r20, 0xFF	; 255
 374:	68 e0       	ldi	r22, 0x08	; 8
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	61 30       	cpi	r22, 0x01	; 1
 382:	61 f4       	brne	.+24     	; 0x39c <Motor_Direction+0x5e>
 384:	4f ef       	ldi	r20, 0xFF	; 255
 386:	60 e4       	ldi	r22, 0x40	; 64
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	62 30       	cpi	r22, 0x02	; 2
 39e:	81 f4       	brne	.+32     	; 0x3c0 <Motor_Direction+0x82>
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	60 e4       	ldi	r22, 0x40	; 64
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 3aa:	4f ef       	ldi	r20, 0xFF	; 255
 3ac:	60 e8       	ldi	r22, 0x80	; 128
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	08 95       	ret

000003c4 <Motor_Start>:
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	19 f0       	breq	.+6      	; 0x3ce <Motor_Start+0xa>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	51 f0       	breq	.+20     	; 0x3e0 <Motor_Start+0x1c>
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <Motor_Start+0x2e>
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 25 03 	call	0x64a	; 0x64a <Pwm_Start>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 25 03 	call	0x64a	; 0x64a <Pwm_Start>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret

000003f6 <Motor_Stop>:
 
 
 /*Describtion: this function choose motor and stop it */

 ERROR_STATUS Motor_Stop(uint8 Motor_Number){
	switch(Motor_Number)
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	19 f0       	breq	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	81 f0       	breq	.+32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3fe:	1e c0       	rjmp	.+60     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
		case MOTOR_1:
			Pwm_Stop(PWM_CH1A);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Stop>
			DIO_Write(GPIOD, PIN2, LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
			DIO_Write(GPIOD, PIN3, LOW);
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	68 e0       	ldi	r22, 0x08	; 8
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
			return NO_ERROR;
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
			break;
		case MOTOR_2:
			Pwm_Stop(PWM_CH1B);
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Stop>
			DIO_Write(GPIOD, PIN6, LOW);
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	60 e4       	ldi	r22, 0x40	; 64
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
			DIO_Write(GPIOD, PIN7, LOW);
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	60 e8       	ldi	r22, 0x80	; 128
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_Write>
			return NO_ERROR;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
			break; }	 
         return ERROR;	 
 43c:	81 e0       	ldi	r24, 0x01	; 1
 }
 43e:	08 95       	ret

00000440 <Us_Init>:
	au8_Ret |= DIO_Write(US_TRIGGER_GPIO, US_TRIGGER_BIT, HIGH);
	_delay_ms(5);
	au8_Ret |= DIO_Write(US_TRIGGER_GPIO, US_TRIGGER_BIT, LOW);

	return au8_Ret;
}
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	00 d0       	rcall	.+0      	; 0x448 <Us_Init+0x8>
 448:	00 d0       	rcall	.+0      	; 0x44a <Us_Init+0xa>
 44a:	1f 92       	push	r1
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	8a 83       	std	Y+2, r24	; 0x02
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	8b 83       	std	Y+3, r24	; 0x03
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	8c 83       	std	Y+4, r24	; 0x04
 460:	8d 83       	std	Y+5, r24	; 0x05
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	0e 94 84 02 	call	0x508	; 0x508 <DIO_init>
 46a:	18 2f       	mov	r17, r24
 46c:	ce 01       	movw	r24, r28
 46e:	04 96       	adiw	r24, 0x04	; 4
 470:	0e 94 12 01 	call	0x224	; 0x224 <Icu_Init>
 474:	81 2b       	or	r24, r17
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	08 95       	ret

00000488 <Us_GetDistance>:

ERROR_STATUS Us_GetDistance(uint16_t* Distance)
{
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <Us_GetDistance+0xc>
 494:	00 d0       	rcall	.+0      	; 0x496 <Us_GetDistance+0xe>
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	7c 01       	movw	r14, r24
	uint8_t au8_Ret = NO_ERROR;

	/* The value to be returned from the Icu_ReadTime function and contains the timer counter value */
	uint32_t au32_CounterValue = 0;
 49c:	19 82       	std	Y+1, r1	; 0x01
 49e:	1a 82       	std	Y+2, r1	; 0x02
 4a0:	1b 82       	std	Y+3, r1	; 0x03
 4a2:	1c 82       	std	Y+4, r1	; 0x04

	/* Reading the timer counter value required to calculate the edge detection time */
	au8_Ret |= Icu_ReadTime(ICU_CH2, ICU_RISE_TO_FALL, &au32_CounterValue);
 4a4:	ae 01       	movw	r20, r28
 4a6:	4f 5f       	subi	r20, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 1f 01 	call	0x23e	; 0x23e <Icu_ReadTime>
 4b2:	18 2f       	mov	r17, r24

	*Distance = (uint16_t)((au32_CounterValue) * US_CONSTANT_PRESCALER_1024);
 4b4:	69 81       	ldd	r22, Y+1	; 0x01
 4b6:	7a 81       	ldd	r23, Y+2	; 0x02
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	9c 81       	ldd	r25, Y+4	; 0x04
 4bc:	0e 94 86 04 	call	0x90c	; 0x90c <__floatunsisf>
 4c0:	26 e9       	ldi	r18, 0x96	; 150
 4c2:	33 e4       	ldi	r19, 0x43	; 67
 4c4:	4b e8       	ldi	r20, 0x8B	; 139
 4c6:	5f e3       	ldi	r21, 0x3F	; 63
 4c8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__mulsf3>
 4cc:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fixunssfsi>
 4d0:	f7 01       	movw	r30, r14
 4d2:	71 83       	std	Z+1, r23	; 0x01
 4d4:	60 83       	st	Z, r22

	return au8_Ret;
}
 4d6:	81 2f       	mov	r24, r17
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	08 95       	ret

000004ec <main>:
_delay_ms(3000);
eror=Steering_SteerCar(CAR_LEFT,80);*/



eror=Car_SM_Init();
 4ec:	0e 94 56 00 	call	0xac	; 0xac <Car_SM_Init>

    while (1) 
    {
		eror=Car_SM_Update();
 4f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <Car_SM_Update>
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	81 ee       	ldi	r24, 0xE1	; 225
 4f8:	94 e0       	ldi	r25, 0x04	; 4
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <main+0xe>
 502:	00 c0       	rjmp	.+0      	; 0x504 <main+0x18>
 504:	00 00       	nop
 506:	f4 cf       	rjmp	.-24     	; 0x4f0 <main+0x4>

00000508 <DIO_init>:
 *  Author: Ahmed Amin
 */ 
#include "DIO.h"

 /*Describtion: this function initialize the gpio direction for specific direction  */
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
 508:	fc 01       	movw	r30, r24
	 switch(DIO_info->GPIO){
 50a:	80 81       	ld	r24, Z
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	a9 f0       	breq	.+42     	; 0x53a <DIO_init+0x32>
 510:	28 f0       	brcs	.+10     	; 0x51c <DIO_init+0x14>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	09 f1       	breq	.+66     	; 0x558 <DIO_init+0x50>
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	71 f1       	breq	.+92     	; 0x576 <DIO_init+0x6e>
 51a:	3c c0       	rjmp	.+120    	; 0x594 <DIO_init+0x8c>
		 case GPIOA:
		 if(DIO_info->dir){
 51c:	92 81       	ldd	r25, Z+2	; 0x02
 51e:	99 23       	and	r25, r25
 520:	29 f0       	breq	.+10     	; 0x52c <DIO_init+0x24>
		 PORTA_DIR|=DIO_info->pins;}
 522:	2a b3       	in	r18, 0x1a	; 26
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	92 2b       	or	r25, r18
 528:	9a bb       	out	0x1a, r25	; 26
 52a:	08 95       	ret
		 else {
			 PORTA_DIR&=~(DIO_info->pins);
 52c:	2a b3       	in	r18, 0x1a	; 26
 52e:	81 81       	ldd	r24, Z+1	; 0x01
 530:	80 95       	com	r24
 532:	82 23       	and	r24, r18
 534:	8a bb       	out	0x1a, r24	; 26
		 }
		 return NO_ERROR;
 536:	89 2f       	mov	r24, r25
 538:	08 95       	ret
		 break;
		 case GPIOB:
		 if(DIO_info->dir){
 53a:	82 81       	ldd	r24, Z+2	; 0x02
 53c:	88 23       	and	r24, r24
 53e:	31 f0       	breq	.+12     	; 0x54c <DIO_init+0x44>
		 PORTB_DIR|=DIO_info->pins;}
 540:	97 b3       	in	r25, 0x17	; 23
 542:	81 81       	ldd	r24, Z+1	; 0x01
 544:	89 2b       	or	r24, r25
 546:	87 bb       	out	0x17, r24	; 23
		 else {
			 PORTB_DIR&=~(DIO_info->pins);
		 }
		 return NO_ERROR;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
		 break;
		 case GPIOB:
		 if(DIO_info->dir){
		 PORTB_DIR|=DIO_info->pins;}
		 else {
			 PORTB_DIR&=~(DIO_info->pins);
 54c:	27 b3       	in	r18, 0x17	; 23
 54e:	91 81       	ldd	r25, Z+1	; 0x01
 550:	90 95       	com	r25
 552:	92 23       	and	r25, r18
 554:	97 bb       	out	0x17, r25	; 23
 556:	08 95       	ret
		 }
		 return NO_ERROR;
		 break;
		 case GPIOC:
		 if(DIO_info->dir){
 558:	82 81       	ldd	r24, Z+2	; 0x02
 55a:	88 23       	and	r24, r24
 55c:	31 f0       	breq	.+12     	; 0x56a <DIO_init+0x62>
		 PORTC_DIR|=DIO_info->pins;}
 55e:	94 b3       	in	r25, 0x14	; 20
 560:	81 81       	ldd	r24, Z+1	; 0x01
 562:	89 2b       	or	r24, r25
 564:	84 bb       	out	0x14, r24	; 20
		 else {
			 PORTC_DIR&=~(DIO_info->pins);
		 }
		 return NO_ERROR;
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	08 95       	ret
		 break;
		 case GPIOC:
		 if(DIO_info->dir){
		 PORTC_DIR|=DIO_info->pins;}
		 else {
			 PORTC_DIR&=~(DIO_info->pins);
 56a:	24 b3       	in	r18, 0x14	; 20
 56c:	91 81       	ldd	r25, Z+1	; 0x01
 56e:	90 95       	com	r25
 570:	92 23       	and	r25, r18
 572:	94 bb       	out	0x14, r25	; 20
 574:	08 95       	ret
		 }
		 return NO_ERROR;
		 break;
		 case GPIOD:
		 if(DIO_info->dir){
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	88 23       	and	r24, r24
 57a:	31 f0       	breq	.+12     	; 0x588 <DIO_init+0x80>
		 PORTD_DIR|=(DIO_info->pins);}
 57c:	91 b3       	in	r25, 0x11	; 17
 57e:	81 81       	ldd	r24, Z+1	; 0x01
 580:	89 2b       	or	r24, r25
 582:	81 bb       	out	0x11, r24	; 17
		 else {
			 PORTD_DIR&=~(DIO_info->pins);
		 }
		 return NO_ERROR;
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
		 break;
		 case GPIOD:
		 if(DIO_info->dir){
		 PORTD_DIR|=(DIO_info->pins);}
		 else {
			 PORTD_DIR&=~(DIO_info->pins);
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	91 81       	ldd	r25, Z+1	; 0x01
 58c:	90 95       	com	r25
 58e:	92 23       	and	r25, r18
 590:	91 bb       	out	0x11, r25	; 17
 592:	08 95       	ret
		 }
		 return NO_ERROR;
		 break;
	 }
	 return ERROR;
 594:	81 e0       	ldi	r24, 0x01	; 1
 }
 596:	08 95       	ret

00000598 <DIO_Write>:
 
  /*Describtion: this function write the gpio pin  */
 ERROR_STATUS DIO_Write (uint8 GPIO, uint8 pins, uint8 value){
	 
	switch(GPIO){
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	99 f0       	breq	.+38     	; 0x5c2 <DIO_Write+0x2a>
 59c:	28 f0       	brcs	.+10     	; 0x5a8 <DIO_Write+0x10>
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	e9 f0       	breq	.+58     	; 0x5dc <DIO_Write+0x44>
 5a2:	83 30       	cpi	r24, 0x03	; 3
 5a4:	41 f1       	breq	.+80     	; 0x5f6 <DIO_Write+0x5e>
 5a6:	34 c0       	rjmp	.+104    	; 0x610 <DIO_Write+0x78>
		case GPIOA:
		if(value){
 5a8:	44 23       	and	r20, r20
 5aa:	29 f0       	breq	.+10     	; 0x5b6 <DIO_Write+0x1e>
		PORTA_DATA|=pins;}
 5ac:	8b b3       	in	r24, 0x1b	; 27
 5ae:	68 2b       	or	r22, r24
 5b0:	6b bb       	out	0x1b, r22	; 27
		else {
			PORTA_DATA&=~(pins);
		}
	    return NO_ERROR;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
	switch(GPIO){
		case GPIOA:
		if(value){
		PORTA_DATA|=pins;}
		else {
			PORTA_DATA&=~(pins);
 5b6:	8b b3       	in	r24, 0x1b	; 27
 5b8:	60 95       	com	r22
 5ba:	68 23       	and	r22, r24
 5bc:	6b bb       	out	0x1b, r22	; 27
		}
	    return NO_ERROR;
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
		break;
		case GPIOB:
		if(value){
 5c2:	44 23       	and	r20, r20
 5c4:	29 f0       	breq	.+10     	; 0x5d0 <DIO_Write+0x38>
		PORTB_DATA|=pins;}
 5c6:	88 b3       	in	r24, 0x18	; 24
 5c8:	68 2b       	or	r22, r24
 5ca:	68 bb       	out	0x18, r22	; 24
		else {
			PORTB_DATA&=~(pins);
		}
	    return NO_ERROR;
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret
		break;
		case GPIOB:
		if(value){
		PORTB_DATA|=pins;}
		else {
			PORTB_DATA&=~(pins);
 5d0:	88 b3       	in	r24, 0x18	; 24
 5d2:	60 95       	com	r22
 5d4:	68 23       	and	r22, r24
 5d6:	68 bb       	out	0x18, r22	; 24
		}
	    return NO_ERROR;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	08 95       	ret
		break;
		case GPIOC:
		if(value){
 5dc:	44 23       	and	r20, r20
 5de:	29 f0       	breq	.+10     	; 0x5ea <DIO_Write+0x52>
		PORTC_DATA|=pins;}
 5e0:	85 b3       	in	r24, 0x15	; 21
 5e2:	68 2b       	or	r22, r24
 5e4:	65 bb       	out	0x15, r22	; 21
		else {
			PORTC_DATA&=~(pins);
		}
		 return NO_ERROR;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
		break;
		case GPIOC:
		if(value){
		PORTC_DATA|=pins;}
		else {
			PORTC_DATA&=~(pins);
 5ea:	85 b3       	in	r24, 0x15	; 21
 5ec:	60 95       	com	r22
 5ee:	68 23       	and	r22, r24
 5f0:	65 bb       	out	0x15, r22	; 21
		}
		 return NO_ERROR;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret
		break;
		case GPIOD:
		if(value){
 5f6:	44 23       	and	r20, r20
 5f8:	29 f0       	breq	.+10     	; 0x604 <DIO_Write+0x6c>
		PORTD_DATA|=pins;}
 5fa:	82 b3       	in	r24, 0x12	; 18
 5fc:	68 2b       	or	r22, r24
 5fe:	62 bb       	out	0x12, r22	; 18
		else {
			PORTD_DATA&=~(pins);
		}
	    return NO_ERROR;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
		break;
		case GPIOD:
		if(value){
		PORTD_DATA|=pins;}
		else {
			PORTD_DATA&=~(pins);
 604:	82 b3       	in	r24, 0x12	; 18
 606:	60 95       	com	r22
 608:	68 23       	and	r22, r24
 60a:	62 bb       	out	0x12, r22	; 18
		}
	    return NO_ERROR;
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
		break;
	}
	 return ERROR;
 610:	81 e0       	ldi	r24, 0x01	; 1
 }
 612:	08 95       	ret

00000614 <Pwm_Init>:
	On_time_value=((Duty*Top_value)/Max_duty);
	error=Timer_Stop(TIMER_CH1);
	error=Timer_SetValue(TIMER_CH1,On_time_value);
    error=Timer_Start(TIMER_CH1,Zero);
	return error;
}
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	00 d0       	rcall	.+0      	; 0x61a <Pwm_Init+0x6>
 61a:	00 d0       	rcall	.+0      	; 0x61c <Pwm_Init+0x8>
 61c:	00 d0       	rcall	.+0      	; 0x61e <Pwm_Init+0xa>
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	1a 82       	std	Y+2, r1	; 0x02
 628:	88 e0       	ldi	r24, 0x08	; 8
 62a:	8b 83       	std	Y+3, r24	; 0x03
 62c:	86 e0       	ldi	r24, 0x06	; 6
 62e:	8c 83       	std	Y+4, r24	; 0x04
 630:	ce 01       	movw	r24, r28
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Timer_Init>
 638:	26 96       	adiw	r28, 0x06	; 6
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <Pwm_Start>:
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	62 9f       	mul	r22, r18
 64e:	c0 01       	movw	r24, r0
 650:	11 24       	eor	r1, r1
 652:	64 e6       	ldi	r22, 0x64	; 100
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodhi4>
 65a:	cb 01       	movw	r24, r22
 65c:	07 2e       	mov	r0, r23
 65e:	00 0c       	add	r0, r0
 660:	aa 0b       	sbc	r26, r26
 662:	bb 0b       	sbc	r27, r27
 664:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <On_time_value>
 668:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <On_time_value+0x1>
 66c:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <On_time_value+0x2>
 670:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <On_time_value+0x3>
 674:	7b bd       	out	0x2b, r23	; 43
 676:	6a bd       	out	0x2a, r22	; 42
 678:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <On_time_value>
 67c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <On_time_value+0x1>
 680:	99 bd       	out	0x29, r25	; 41
 682:	88 bd       	out	0x28, r24	; 40
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 1c 04 	call	0x838	; 0x838 <Timer_Start>
 68e:	2e b5       	in	r18, 0x2e	; 46
 690:	3f b5       	in	r19, 0x2f	; 47
 692:	28 60       	ori	r18, 0x08	; 8
 694:	31 6a       	ori	r19, 0xA1	; 161
 696:	3f bd       	out	0x2f, r19	; 47
 698:	2e bd       	out	0x2e, r18	; 46
 69a:	08 95       	ret

0000069c <Pwm_Stop>:

 /*Describtion: this function stops the pwm by stopping the timer  */
extern ERROR_STATUS Pwm_Stop(uint8 Channel){
	uint8 error=NO_ERROR;
	error=Timer_Stop(TIMER_CH1);
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	0e 94 40 04 	call	0x880	; 0x880 <Timer_Stop>
	return NO_ERROR;
}
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <Timer_Init>:
OCR2= Data;
return NO_ERROR;
break;
}	
	return ERROR;	
}
 6a6:	fc 01       	movw	r30, r24
 6a8:	90 81       	ld	r25, Z
 6aa:	91 30       	cpi	r25, 0x01	; 1
 6ac:	e1 f1       	breq	.+120    	; 0x726 <Timer_Init+0x80>
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <Timer_Init+0x12>
 6b0:	92 30       	cpi	r25, 0x02	; 2
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <Timer_Init+0x10>
 6b4:	76 c0       	rjmp	.+236    	; 0x7a2 <Timer_Init+0xfc>
 6b6:	b9 c0       	rjmp	.+370    	; 0x82a <Timer_Init+0x184>
 6b8:	83 b7       	in	r24, 0x33	; 51
 6ba:	87 7b       	andi	r24, 0xB7	; 183
 6bc:	21 81       	ldd	r18, Z+1	; 0x01
 6be:	82 2b       	or	r24, r18
 6c0:	83 bf       	out	0x33, r24	; 51
 6c2:	82 81       	ldd	r24, Z+2	; 0x02
 6c4:	88 23       	and	r24, r24
 6c6:	19 f0       	breq	.+6      	; 0x6ce <Timer_Init+0x28>
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	29 f0       	breq	.+10     	; 0x6d6 <Timer_Init+0x30>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <Timer_Init+0x38>
 6ce:	89 b7       	in	r24, 0x39	; 57
 6d0:	8c 7f       	andi	r24, 0xFC	; 252
 6d2:	89 bf       	out	0x39, r24	; 57
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <Timer_Init+0x38>
 6d6:	89 b7       	in	r24, 0x39	; 57
 6d8:	8c 7f       	andi	r24, 0xFC	; 252
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	89 bf       	out	0x39, r24	; 57
 6de:	83 81       	ldd	r24, Z+3	; 0x03
 6e0:	48 2f       	mov	r20, r24
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	48 30       	cpi	r20, 0x08	; 8
 6e6:	51 05       	cpc	r21, r1
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <Timer_Init+0x46>
 6ea:	a4 c0       	rjmp	.+328    	; 0x834 <Timer_Init+0x18e>
 6ec:	fa 01       	movw	r30, r20
 6ee:	e6 5d       	subi	r30, 0xD6	; 214
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__tablejump2__>
 6f6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <gu8_timer0PreScaler>
 6fa:	98 2f       	mov	r25, r24
 6fc:	9b c0       	rjmp	.+310    	; 0x834 <Timer_Init+0x18e>
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_timer0PreScaler>
 704:	97 c0       	rjmp	.+302    	; 0x834 <Timer_Init+0x18e>
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_timer0PreScaler>
 70c:	93 c0       	rjmp	.+294    	; 0x834 <Timer_Init+0x18e>
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_timer0PreScaler>
 714:	8f c0       	rjmp	.+286    	; 0x834 <Timer_Init+0x18e>
 716:	84 e0       	ldi	r24, 0x04	; 4
 718:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_timer0PreScaler>
 71c:	8b c0       	rjmp	.+278    	; 0x834 <Timer_Init+0x18e>
 71e:	85 e0       	ldi	r24, 0x05	; 5
 720:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_timer0PreScaler>
 724:	87 c0       	rjmp	.+270    	; 0x834 <Timer_Init+0x18e>
 726:	2e b5       	in	r18, 0x2e	; 46
 728:	3f b5       	in	r19, 0x2f	; 47
 72a:	81 81       	ldd	r24, Z+1	; 0x01
 72c:	28 2b       	or	r18, r24
 72e:	3f bd       	out	0x2f, r19	; 47
 730:	2e bd       	out	0x2e, r18	; 46
 732:	82 81       	ldd	r24, Z+2	; 0x02
 734:	88 23       	and	r24, r24
 736:	19 f0       	breq	.+6      	; 0x73e <Timer_Init+0x98>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	29 f0       	breq	.+10     	; 0x746 <Timer_Init+0xa0>
 73c:	08 c0       	rjmp	.+16     	; 0x74e <Timer_Init+0xa8>
 73e:	89 b7       	in	r24, 0x39	; 57
 740:	83 7c       	andi	r24, 0xC3	; 195
 742:	89 bf       	out	0x39, r24	; 57
 744:	04 c0       	rjmp	.+8      	; 0x74e <Timer_Init+0xa8>
 746:	89 b7       	in	r24, 0x39	; 57
 748:	83 7c       	andi	r24, 0xC3	; 195
 74a:	80 61       	ori	r24, 0x10	; 16
 74c:	89 bf       	out	0x39, r24	; 57
 74e:	83 81       	ldd	r24, Z+3	; 0x03
 750:	48 2f       	mov	r20, r24
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	48 30       	cpi	r20, 0x08	; 8
 756:	51 05       	cpc	r21, r1
 758:	28 f4       	brcc	.+10     	; 0x764 <Timer_Init+0xbe>
 75a:	fa 01       	movw	r30, r20
 75c:	ee 5c       	subi	r30, 0xCE	; 206
 75e:	ff 4f       	sbci	r31, 0xFF	; 255
 760:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__tablejump2__>
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	66 c0       	rjmp	.+204    	; 0x834 <Timer_Init+0x18e>
 768:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <gu8_timer1PreScaler>
 76c:	98 2f       	mov	r25, r24
 76e:	62 c0       	rjmp	.+196    	; 0x834 <Timer_Init+0x18e>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_timer1PreScaler>
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	5d c0       	rjmp	.+186    	; 0x834 <Timer_Init+0x18e>
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_timer1PreScaler>
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	58 c0       	rjmp	.+176    	; 0x834 <Timer_Init+0x18e>
 784:	83 e0       	ldi	r24, 0x03	; 3
 786:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_timer1PreScaler>
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	53 c0       	rjmp	.+166    	; 0x834 <Timer_Init+0x18e>
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_timer1PreScaler>
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	4e c0       	rjmp	.+156    	; 0x834 <Timer_Init+0x18e>
 798:	85 e0       	ldi	r24, 0x05	; 5
 79a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gu8_timer1PreScaler>
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	49 c0       	rjmp	.+146    	; 0x834 <Timer_Init+0x18e>
 7a2:	85 b5       	in	r24, 0x25	; 37
 7a4:	87 7b       	andi	r24, 0xB7	; 183
 7a6:	91 81       	ldd	r25, Z+1	; 0x01
 7a8:	89 2b       	or	r24, r25
 7aa:	85 bd       	out	0x25, r24	; 37
 7ac:	82 81       	ldd	r24, Z+2	; 0x02
 7ae:	88 23       	and	r24, r24
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <Timer_Init+0x112>
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	29 f0       	breq	.+10     	; 0x7c0 <Timer_Init+0x11a>
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <Timer_Init+0x122>
 7b8:	89 b7       	in	r24, 0x39	; 57
 7ba:	8f 73       	andi	r24, 0x3F	; 63
 7bc:	89 bf       	out	0x39, r24	; 57
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <Timer_Init+0x122>
 7c0:	89 b7       	in	r24, 0x39	; 57
 7c2:	8f 73       	andi	r24, 0x3F	; 63
 7c4:	80 64       	ori	r24, 0x40	; 64
 7c6:	89 bf       	out	0x39, r24	; 57
 7c8:	93 81       	ldd	r25, Z+3	; 0x03
 7ca:	49 2f       	mov	r20, r25
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	48 30       	cpi	r20, 0x08	; 8
 7d0:	51 05       	cpc	r21, r1
 7d2:	78 f5       	brcc	.+94     	; 0x832 <Timer_Init+0x18c>
 7d4:	fa 01       	movw	r30, r20
 7d6:	e6 5c       	subi	r30, 0xC6	; 198
 7d8:	ff 4f       	sbci	r31, 0xFF	; 255
 7da:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__tablejump2__>
 7de:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <gu8_timer2PreScaler>
 7e2:	28 c0       	rjmp	.+80     	; 0x834 <Timer_Init+0x18e>
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	23 c0       	rjmp	.+70     	; 0x834 <Timer_Init+0x18e>
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	1e c0       	rjmp	.+60     	; 0x834 <Timer_Init+0x18e>
 7f8:	83 e0       	ldi	r24, 0x03	; 3
 7fa:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	19 c0       	rjmp	.+50     	; 0x834 <Timer_Init+0x18e>
 802:	84 e0       	ldi	r24, 0x04	; 4
 804:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	14 c0       	rjmp	.+40     	; 0x834 <Timer_Init+0x18e>
 80c:	85 e0       	ldi	r24, 0x05	; 5
 80e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0f c0       	rjmp	.+30     	; 0x834 <Timer_Init+0x18e>
 816:	86 e0       	ldi	r24, 0x06	; 6
 818:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0a c0       	rjmp	.+20     	; 0x834 <Timer_Init+0x18e>
 820:	87 e0       	ldi	r24, 0x07	; 7
 822:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_timer2PreScaler>
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	05 c0       	rjmp	.+10     	; 0x834 <Timer_Init+0x18e>
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	03 c0       	rjmp	.+6      	; 0x834 <Timer_Init+0x18e>
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	01 c0       	rjmp	.+2      	; 0x834 <Timer_Init+0x18e>
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	89 2f       	mov	r24, r25
 836:	08 95       	ret

00000838 <Timer_Start>:
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	69 f0       	breq	.+26     	; 0x856 <Timer_Start+0x1e>
 83c:	18 f0       	brcs	.+6      	; 0x844 <Timer_Start+0xc>
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	a1 f0       	breq	.+40     	; 0x86a <__stack+0xb>
 842:	1c c0       	rjmp	.+56     	; 0x87c <__stack+0x1d>
 844:	83 b7       	in	r24, 0x33	; 51
 846:	88 7f       	andi	r24, 0xF8	; 248
 848:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <gu8_timer0PreScaler>
 84c:	89 2b       	or	r24, r25
 84e:	83 bf       	out	0x33, r24	; 51
 850:	62 bf       	out	0x32, r22	; 50
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
 856:	8e b5       	in	r24, 0x2e	; 46
 858:	88 7f       	andi	r24, 0xF8	; 248
 85a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <gu8_timer1PreScaler>
 85e:	89 2b       	or	r24, r25
 860:	8e bd       	out	0x2e, r24	; 46
 862:	7d bd       	out	0x2d, r23	; 45
 864:	6c bd       	out	0x2c, r22	; 44
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
 86a:	85 b5       	in	r24, 0x25	; 37
 86c:	88 7f       	andi	r24, 0xF8	; 248
 86e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <gu8_timer2PreScaler>
 872:	89 2b       	or	r24, r25
 874:	85 bd       	out	0x25, r24	; 37
 876:	64 bd       	out	0x24, r22	; 36
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	08 95       	ret
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	08 95       	ret

00000880 <Timer_Stop>:

 /*Describtion: this function stop timer fby applying no clock  */
ERROR_STATUS Timer_Stop(uint8 Timer_CH_NO){
switch(Timer_CH_NO){
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	49 f0       	breq	.+18     	; 0x896 <Timer_Stop+0x16>
 884:	18 f0       	brcs	.+6      	; 0x88c <Timer_Stop+0xc>
 886:	82 30       	cpi	r24, 0x02	; 2
 888:	59 f0       	breq	.+22     	; 0x8a0 <Timer_Stop+0x20>
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <Timer_Stop+0x2a>
case TIMER_CH0:
TCCR0&= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
 88c:	83 b7       	in	r24, 0x33	; 51
 88e:	88 7f       	andi	r24, 0xF8	; 248
 890:	83 bf       	out	0x33, r24	; 51
return NO_ERROR;
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	08 95       	ret
break;

case TIMER_CH1:
TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 896:	8e b5       	in	r24, 0x2e	; 46
 898:	88 7f       	andi	r24, 0xF8	; 248
 89a:	8e bd       	out	0x2e, r24	; 46
return NO_ERROR;
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	08 95       	ret
break;

case TIMER_CH2:
TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
 8a0:	85 b5       	in	r24, 0x25	; 37
 8a2:	88 7f       	andi	r24, 0xF8	; 248
 8a4:	85 bd       	out	0x25, r24	; 37
return NO_ERROR;
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	08 95       	ret
break;
}	
return ERROR;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
}
 8ac:	08 95       	ret

000008ae <__fixunssfsi>:
 8ae:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_splitA>
 8b2:	88 f0       	brcs	.+34     	; 0x8d6 <__fixunssfsi+0x28>
 8b4:	9f 57       	subi	r25, 0x7F	; 127
 8b6:	98 f0       	brcs	.+38     	; 0x8de <__fixunssfsi+0x30>
 8b8:	b9 2f       	mov	r27, r25
 8ba:	99 27       	eor	r25, r25
 8bc:	b7 51       	subi	r27, 0x17	; 23
 8be:	b0 f0       	brcs	.+44     	; 0x8ec <__fixunssfsi+0x3e>
 8c0:	e1 f0       	breq	.+56     	; 0x8fa <__fixunssfsi+0x4c>
 8c2:	66 0f       	add	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	1a f0       	brmi	.+6      	; 0x8d2 <__fixunssfsi+0x24>
 8cc:	ba 95       	dec	r27
 8ce:	c9 f7       	brne	.-14     	; 0x8c2 <__fixunssfsi+0x14>
 8d0:	14 c0       	rjmp	.+40     	; 0x8fa <__fixunssfsi+0x4c>
 8d2:	b1 30       	cpi	r27, 0x01	; 1
 8d4:	91 f0       	breq	.+36     	; 0x8fa <__fixunssfsi+0x4c>
 8d6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_zero>
 8da:	b1 e0       	ldi	r27, 0x01	; 1
 8dc:	08 95       	ret
 8de:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 8e2:	67 2f       	mov	r22, r23
 8e4:	78 2f       	mov	r23, r24
 8e6:	88 27       	eor	r24, r24
 8e8:	b8 5f       	subi	r27, 0xF8	; 248
 8ea:	39 f0       	breq	.+14     	; 0x8fa <__fixunssfsi+0x4c>
 8ec:	b9 3f       	cpi	r27, 0xF9	; 249
 8ee:	cc f3       	brlt	.-14     	; 0x8e2 <__fixunssfsi+0x34>
 8f0:	86 95       	lsr	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b3 95       	inc	r27
 8f8:	d9 f7       	brne	.-10     	; 0x8f0 <__fixunssfsi+0x42>
 8fa:	3e f4       	brtc	.+14     	; 0x90a <__fixunssfsi+0x5c>
 8fc:	90 95       	com	r25
 8fe:	80 95       	com	r24
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	08 95       	ret

0000090c <__floatunsisf>:
 90c:	e8 94       	clt
 90e:	09 c0       	rjmp	.+18     	; 0x922 <__floatsisf+0x12>

00000910 <__floatsisf>:
 910:	97 fb       	bst	r25, 7
 912:	3e f4       	brtc	.+14     	; 0x922 <__floatsisf+0x12>
 914:	90 95       	com	r25
 916:	80 95       	com	r24
 918:	70 95       	com	r23
 91a:	61 95       	neg	r22
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	99 23       	and	r25, r25
 924:	a9 f0       	breq	.+42     	; 0x950 <__floatsisf+0x40>
 926:	f9 2f       	mov	r31, r25
 928:	96 e9       	ldi	r25, 0x96	; 150
 92a:	bb 27       	eor	r27, r27
 92c:	93 95       	inc	r25
 92e:	f6 95       	lsr	r31
 930:	87 95       	ror	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f1 11       	cpse	r31, r1
 93a:	f8 cf       	rjmp	.-16     	; 0x92c <__floatsisf+0x1c>
 93c:	fa f4       	brpl	.+62     	; 0x97c <__floatsisf+0x6c>
 93e:	bb 0f       	add	r27, r27
 940:	11 f4       	brne	.+4      	; 0x946 <__floatsisf+0x36>
 942:	60 ff       	sbrs	r22, 0
 944:	1b c0       	rjmp	.+54     	; 0x97c <__floatsisf+0x6c>
 946:	6f 5f       	subi	r22, 0xFF	; 255
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	16 c0       	rjmp	.+44     	; 0x97c <__floatsisf+0x6c>
 950:	88 23       	and	r24, r24
 952:	11 f0       	breq	.+4      	; 0x958 <__floatsisf+0x48>
 954:	96 e9       	ldi	r25, 0x96	; 150
 956:	11 c0       	rjmp	.+34     	; 0x97a <__floatsisf+0x6a>
 958:	77 23       	and	r23, r23
 95a:	21 f0       	breq	.+8      	; 0x964 <__floatsisf+0x54>
 95c:	9e e8       	ldi	r25, 0x8E	; 142
 95e:	87 2f       	mov	r24, r23
 960:	76 2f       	mov	r23, r22
 962:	05 c0       	rjmp	.+10     	; 0x96e <__floatsisf+0x5e>
 964:	66 23       	and	r22, r22
 966:	71 f0       	breq	.+28     	; 0x984 <__floatsisf+0x74>
 968:	96 e8       	ldi	r25, 0x86	; 134
 96a:	86 2f       	mov	r24, r22
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	2a f0       	brmi	.+10     	; 0x97c <__floatsisf+0x6c>
 972:	9a 95       	dec	r25
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	da f7       	brpl	.-10     	; 0x972 <__floatsisf+0x62>
 97c:	88 0f       	add	r24, r24
 97e:	96 95       	lsr	r25
 980:	87 95       	ror	r24
 982:	97 f9       	bld	r25, 7
 984:	08 95       	ret

00000986 <__fp_split3>:
 986:	57 fd       	sbrc	r21, 7
 988:	90 58       	subi	r25, 0x80	; 128
 98a:	44 0f       	add	r20, r20
 98c:	55 1f       	adc	r21, r21
 98e:	59 f0       	breq	.+22     	; 0x9a6 <__fp_splitA+0x10>
 990:	5f 3f       	cpi	r21, 0xFF	; 255
 992:	71 f0       	breq	.+28     	; 0x9b0 <__fp_splitA+0x1a>
 994:	47 95       	ror	r20

00000996 <__fp_splitA>:
 996:	88 0f       	add	r24, r24
 998:	97 fb       	bst	r25, 7
 99a:	99 1f       	adc	r25, r25
 99c:	61 f0       	breq	.+24     	; 0x9b6 <__fp_splitA+0x20>
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <__fp_splitA+0x2a>
 9a2:	87 95       	ror	r24
 9a4:	08 95       	ret
 9a6:	12 16       	cp	r1, r18
 9a8:	13 06       	cpc	r1, r19
 9aa:	14 06       	cpc	r1, r20
 9ac:	55 1f       	adc	r21, r21
 9ae:	f2 cf       	rjmp	.-28     	; 0x994 <__fp_split3+0xe>
 9b0:	46 95       	lsr	r20
 9b2:	f1 df       	rcall	.-30     	; 0x996 <__fp_splitA>
 9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__fp_splitA+0x30>
 9b6:	16 16       	cp	r1, r22
 9b8:	17 06       	cpc	r1, r23
 9ba:	18 06       	cpc	r1, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	f1 cf       	rjmp	.-30     	; 0x9a2 <__fp_splitA+0xc>
 9c0:	86 95       	lsr	r24
 9c2:	71 05       	cpc	r23, r1
 9c4:	61 05       	cpc	r22, r1
 9c6:	08 94       	sec
 9c8:	08 95       	ret

000009ca <__fp_zero>:
 9ca:	e8 94       	clt

000009cc <__fp_szero>:
 9cc:	bb 27       	eor	r27, r27
 9ce:	66 27       	eor	r22, r22
 9d0:	77 27       	eor	r23, r23
 9d2:	cb 01       	movw	r24, r22
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__mulsf3>:
 9d8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3x>
 9dc:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__fp_round>
 9e0:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscA>
 9e4:	38 f0       	brcs	.+14     	; 0x9f4 <__mulsf3+0x1c>
 9e6:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscB>
 9ea:	20 f0       	brcs	.+8      	; 0x9f4 <__mulsf3+0x1c>
 9ec:	95 23       	and	r25, r21
 9ee:	11 f0       	breq	.+4      	; 0x9f4 <__mulsf3+0x1c>
 9f0:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
 9f4:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__fp_nan>
 9f8:	11 24       	eor	r1, r1
 9fa:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>

000009fe <__mulsf3x>:
 9fe:	0e 94 c3 04 	call	0x986	; 0x986 <__fp_split3>
 a02:	70 f3       	brcs	.-36     	; 0x9e0 <__mulsf3+0x8>

00000a04 <__mulsf3_pse>:
 a04:	95 9f       	mul	r25, r21
 a06:	c1 f3       	breq	.-16     	; 0x9f8 <__mulsf3+0x20>
 a08:	95 0f       	add	r25, r21
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	55 1f       	adc	r21, r21
 a0e:	62 9f       	mul	r22, r18
 a10:	f0 01       	movw	r30, r0
 a12:	72 9f       	mul	r23, r18
 a14:	bb 27       	eor	r27, r27
 a16:	f0 0d       	add	r31, r0
 a18:	b1 1d       	adc	r27, r1
 a1a:	63 9f       	mul	r22, r19
 a1c:	aa 27       	eor	r26, r26
 a1e:	f0 0d       	add	r31, r0
 a20:	b1 1d       	adc	r27, r1
 a22:	aa 1f       	adc	r26, r26
 a24:	64 9f       	mul	r22, r20
 a26:	66 27       	eor	r22, r22
 a28:	b0 0d       	add	r27, r0
 a2a:	a1 1d       	adc	r26, r1
 a2c:	66 1f       	adc	r22, r22
 a2e:	82 9f       	mul	r24, r18
 a30:	22 27       	eor	r18, r18
 a32:	b0 0d       	add	r27, r0
 a34:	a1 1d       	adc	r26, r1
 a36:	62 1f       	adc	r22, r18
 a38:	73 9f       	mul	r23, r19
 a3a:	b0 0d       	add	r27, r0
 a3c:	a1 1d       	adc	r26, r1
 a3e:	62 1f       	adc	r22, r18
 a40:	83 9f       	mul	r24, r19
 a42:	a0 0d       	add	r26, r0
 a44:	61 1d       	adc	r22, r1
 a46:	22 1f       	adc	r18, r18
 a48:	74 9f       	mul	r23, r20
 a4a:	33 27       	eor	r19, r19
 a4c:	a0 0d       	add	r26, r0
 a4e:	61 1d       	adc	r22, r1
 a50:	23 1f       	adc	r18, r19
 a52:	84 9f       	mul	r24, r20
 a54:	60 0d       	add	r22, r0
 a56:	21 1d       	adc	r18, r1
 a58:	82 2f       	mov	r24, r18
 a5a:	76 2f       	mov	r23, r22
 a5c:	6a 2f       	mov	r22, r26
 a5e:	11 24       	eor	r1, r1
 a60:	9f 57       	subi	r25, 0x7F	; 127
 a62:	50 40       	sbci	r21, 0x00	; 0
 a64:	9a f0       	brmi	.+38     	; 0xa8c <__mulsf3_pse+0x88>
 a66:	f1 f0       	breq	.+60     	; 0xaa4 <__mulsf3_pse+0xa0>
 a68:	88 23       	and	r24, r24
 a6a:	4a f0       	brmi	.+18     	; 0xa7e <__mulsf3_pse+0x7a>
 a6c:	ee 0f       	add	r30, r30
 a6e:	ff 1f       	adc	r31, r31
 a70:	bb 1f       	adc	r27, r27
 a72:	66 1f       	adc	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	91 50       	subi	r25, 0x01	; 1
 a7a:	50 40       	sbci	r21, 0x00	; 0
 a7c:	a9 f7       	brne	.-22     	; 0xa68 <__mulsf3_pse+0x64>
 a7e:	9e 3f       	cpi	r25, 0xFE	; 254
 a80:	51 05       	cpc	r21, r1
 a82:	80 f0       	brcs	.+32     	; 0xaa4 <__mulsf3_pse+0xa0>
 a84:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_inf>
 a88:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 a8c:	5f 3f       	cpi	r21, 0xFF	; 255
 a8e:	e4 f3       	brlt	.-8      	; 0xa88 <__mulsf3_pse+0x84>
 a90:	98 3e       	cpi	r25, 0xE8	; 232
 a92:	d4 f3       	brlt	.-12     	; 0xa88 <__mulsf3_pse+0x84>
 a94:	86 95       	lsr	r24
 a96:	77 95       	ror	r23
 a98:	67 95       	ror	r22
 a9a:	b7 95       	ror	r27
 a9c:	f7 95       	ror	r31
 a9e:	e7 95       	ror	r30
 aa0:	9f 5f       	subi	r25, 0xFF	; 255
 aa2:	c1 f7       	brne	.-16     	; 0xa94 <__mulsf3_pse+0x90>
 aa4:	fe 2b       	or	r31, r30
 aa6:	88 0f       	add	r24, r24
 aa8:	91 1d       	adc	r25, r1
 aaa:	96 95       	lsr	r25
 aac:	87 95       	ror	r24
 aae:	97 f9       	bld	r25, 7
 ab0:	08 95       	ret

00000ab2 <__fp_inf>:
 ab2:	97 f9       	bld	r25, 7
 ab4:	9f 67       	ori	r25, 0x7F	; 127
 ab6:	80 e8       	ldi	r24, 0x80	; 128
 ab8:	70 e0       	ldi	r23, 0x00	; 0
 aba:	60 e0       	ldi	r22, 0x00	; 0
 abc:	08 95       	ret

00000abe <__fp_nan>:
 abe:	9f ef       	ldi	r25, 0xFF	; 255
 ac0:	80 ec       	ldi	r24, 0xC0	; 192
 ac2:	08 95       	ret

00000ac4 <__fp_pscA>:
 ac4:	00 24       	eor	r0, r0
 ac6:	0a 94       	dec	r0
 ac8:	16 16       	cp	r1, r22
 aca:	17 06       	cpc	r1, r23
 acc:	18 06       	cpc	r1, r24
 ace:	09 06       	cpc	r0, r25
 ad0:	08 95       	ret

00000ad2 <__fp_pscB>:
 ad2:	00 24       	eor	r0, r0
 ad4:	0a 94       	dec	r0
 ad6:	12 16       	cp	r1, r18
 ad8:	13 06       	cpc	r1, r19
 ada:	14 06       	cpc	r1, r20
 adc:	05 06       	cpc	r0, r21
 ade:	08 95       	ret

00000ae0 <__fp_round>:
 ae0:	09 2e       	mov	r0, r25
 ae2:	03 94       	inc	r0
 ae4:	00 0c       	add	r0, r0
 ae6:	11 f4       	brne	.+4      	; 0xaec <__fp_round+0xc>
 ae8:	88 23       	and	r24, r24
 aea:	52 f0       	brmi	.+20     	; 0xb00 <__fp_round+0x20>
 aec:	bb 0f       	add	r27, r27
 aee:	40 f4       	brcc	.+16     	; 0xb00 <__fp_round+0x20>
 af0:	bf 2b       	or	r27, r31
 af2:	11 f4       	brne	.+4      	; 0xaf8 <__fp_round+0x18>
 af4:	60 ff       	sbrs	r22, 0
 af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fp_round+0x20>
 af8:	6f 5f       	subi	r22, 0xFF	; 255
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	08 95       	ret

00000b02 <__divmodhi4>:
 b02:	97 fb       	bst	r25, 7
 b04:	07 2e       	mov	r0, r23
 b06:	16 f4       	brtc	.+4      	; 0xb0c <__divmodhi4+0xa>
 b08:	00 94       	com	r0
 b0a:	07 d0       	rcall	.+14     	; 0xb1a <__divmodhi4_neg1>
 b0c:	77 fd       	sbrc	r23, 7
 b0e:	09 d0       	rcall	.+18     	; 0xb22 <__divmodhi4_neg2>
 b10:	0e 94 9b 05 	call	0xb36	; 0xb36 <__udivmodhi4>
 b14:	07 fc       	sbrc	r0, 7
 b16:	05 d0       	rcall	.+10     	; 0xb22 <__divmodhi4_neg2>
 b18:	3e f4       	brtc	.+14     	; 0xb28 <__divmodhi4_exit>

00000b1a <__divmodhi4_neg1>:
 b1a:	90 95       	com	r25
 b1c:	81 95       	neg	r24
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__divmodhi4_neg2>:
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255

00000b28 <__divmodhi4_exit>:
 b28:	08 95       	ret

00000b2a <__tablejump2__>:
 b2a:	ee 0f       	add	r30, r30
 b2c:	ff 1f       	adc	r31, r31
 b2e:	05 90       	lpm	r0, Z+
 b30:	f4 91       	lpm	r31, Z
 b32:	e0 2d       	mov	r30, r0
 b34:	09 94       	ijmp

00000b36 <__udivmodhi4>:
 b36:	aa 1b       	sub	r26, r26
 b38:	bb 1b       	sub	r27, r27
 b3a:	51 e1       	ldi	r21, 0x11	; 17
 b3c:	07 c0       	rjmp	.+14     	; 0xb4c <__udivmodhi4_ep>

00000b3e <__udivmodhi4_loop>:
 b3e:	aa 1f       	adc	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	a6 17       	cp	r26, r22
 b44:	b7 07       	cpc	r27, r23
 b46:	10 f0       	brcs	.+4      	; 0xb4c <__udivmodhi4_ep>
 b48:	a6 1b       	sub	r26, r22
 b4a:	b7 0b       	sbc	r27, r23

00000b4c <__udivmodhi4_ep>:
 b4c:	88 1f       	adc	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	5a 95       	dec	r21
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__udivmodhi4_loop>
 b54:	80 95       	com	r24
 b56:	90 95       	com	r25
 b58:	bc 01       	movw	r22, r24
 b5a:	cd 01       	movw	r24, r26
 b5c:	08 95       	ret

00000b5e <_exit>:
 b5e:	f8 94       	cli

00000b60 <__stop_program>:
 b60:	ff cf       	rjmp	.-2      	; 0xb60 <__stop_program>
